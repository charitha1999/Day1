/* console.log()
1. mainly used to log(print) the output to the console.
 We can put any type inside the log(), be it a string, array, object, boolean etc. */
// console.log() method 
console.log('abc');  
console.log(1); 
console.log(true); 
console.log(null); 
console.log(undefined);  
console.log([1, 2, 3, 4]); // array inside log 
console.log({a:1, b:2, c:3}); // object inside log 


/* console.error()
1. used to log error message to the console. Useful in testing of code.
 By default the error message will be highlighted with red color.   */
// console.error() method  
console.error('This is a simple error'); 


/* console.warn()
1. used to log warning message to the console.
 By default the warning message will be highlighted with yellow color.  */
 // console.warn() method  
 console.warn('This is a warning.');  


/* console.clear()
1. used to clear the console.
The console will be cleared, in case of Chrome a simple overlayed text will be printed like :
 ‘Console was cleared’ while in firefox no message is returned.
*/
// console.clear() method  
console.clear();  


/* console.time() and console.timeEnd()
1. whenever we want to know the amount of time spend by a block or a function, 
we can make use of the time() and timeEnd() methods provided by the javascript console object. 
They take a label which must be same, and the code inside can be anything( function, object, simple console).
*/
// console.time() and console.timeEnd() method  
console.time('abc'); 
 let fun =  function(){ 
     console.log('fun is running'); 
 } 
 let fun2 = function(){ 
     console.log('fun2 is running..'); 
 } 
 fun(); // calling fun(); 
 fun2(); // calling fun2(); 
console.timeEnd('abc'); 
In the above code sample, 
we can see that the label is ‘abc’ which is same for both the time() and the timeEnd() method.
 If we increase the amount of code inside the block defined by these methods, then the time will increase. 
  It is also worth remembering that the time returned to the console will be in milliseconds and might be different each time we refresh the page.


 /* console.table()
1. This method allows us to generate a table inside a console.
 The input must be an array or an object 
// console.table() method 
console.table({'a':1, 'b':2}); 
